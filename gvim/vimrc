set nocp
execute pathogen#infect()

""""""""""""""  my own settings
"""""""" 使用pathogen安装插件需要注意的
"" 1.无法安装主题风格， 只能够将主题手动放置于~/.vim/colors
"" 2.切勿通过发行套件的软件管理工具安装任何插件，不然~/.vim又要混乱了
"" 3.安装*.vba的插件的方法是：
""		:e plugin_name.vba
""		!mkdir -p ~/.vim/bundle/plugin_name
""		:UseVimball ~/.vim/bundle/plugin_name

"解决菜单乱码

" 配置多语言环境,解决中文乱码问题

if has("multi_byte") 
    " UTF-8 编码 
    set encoding=utf-8 
    set termencoding=utf-8 
    set formatoptions+=mM 
    set fencs=utf-8,gbk 
    if v:lang =~? '^/(zh/)/|/(ja/)/|/(ko/)' 
        set ambiwidth=double 
    endif 
    if has("win32") 
        source $VIMRUNTIME/delmenu.vim 
        source $VIMRUNTIME/menu.vim 
        language messages zh_CN.utf-8 
    endif 
else 
    echoerr "Sorry, this version of (g)vim was not compiled with +multi_byte" 
endif

set lines=50 
set columns=120 ""设置初始界面大小 

"""" 字体设置
set gfn=consolas:h12

set backspace=indent,eol,start
filetype plugin indent on ""打开文件类型检测, 加了这句才可以用智能补全
set completeopt=longest,menu  ""关掉智能补全时的预览窗口
filetype on
set nocp
set nocompatible            " 关闭 vi 兼容模式
"开启语法高亮功能
syntax enable
"允许用指定语法高亮配色方案替换默认方案
syntax on
"自适应不同语言的智能缩进
filetype indent on

set wildmenu 				" vim自身命令行模式智能补全
"set mouse=a

let mapleader=';'


"
"配色方案 
set background=dark
colorscheme molokai
"colorscheme phd
"colorscheme solarized

"禁止光标闪烁
set gcr=a:block-blinkon0
"禁止显示滚动条
set guioptions-=l
set guioptions-=L
set guioptions-=r
set guioptions-=R

"禁止显示菜单和工具条
"set guioptions-=m
set guioptions-=T


"总是显示状态栏
set laststatus=2
"显示光标当前位置
set ruler
"高亮当前行/列
set cursorline
set cursorcolumn
set number
set nowrap

"基于缩进或者语法折叠   ""za, 打开或者关闭当前折叠，zM关闭所有折叠，zR,打开所有折叠
"set foldmethod=indent
set foldmethod=syntax
"启动vim时关闭折叠
set nofoldenable


"将制表符扩展为空格       """"""这里的设置是为了让可视化缩进显示插件能够统一显示而已
set expandtab
"设置编辑时制表符占用的空格数
set tabstop=4
"set shiftwidth=4

"让vim把数量连续的空格视为一个制表符
set softtabstop=4         """"""




"""""""""""""" 我自己的设置
set matchtime=1             " 匹配括号高亮的时间（单位是十分之一秒）
set encoding=utf-8
set number                  " 显示行号
set ruler                   " 打开状态栏标尺""""""""Indent Guides的设置
set shiftwidth=4            " 设定 << 和 >> 命令移动时的宽度为 4"随vim自动启动
set tabstop=4               " 设定 tab 长度为 4let g:indent_guides_enable_on_vim_startup=1
set hlsearch                " 搜索时高亮显示被找到的文本"从第二层开始可视化显示缩进
set noerrorbells            " 关闭错误信息响铃let g:indent_guides_start_level=2
set showmatch               " 插入括号时，短暂地跳转到匹配的对应括号"色块宽度
set matchtime=2             " 短暂跳转到匹配括号的时间let g:indent_guides_guide_size=1
set magic                   " 设置魔术"快捷键i开/关缩进可视化
set smartindent             " 开启新行时使用智能自动缩进"nmap <silent> <Leader>i <Plug>IndentGuidesToggle
set noignorecase
set incsearch
set autoread				" 设置当文件被改动时自动载入"""""""" Powerline 设置状态栏主题风格
""set completeopt=preview,menu ""代码补全 let g:Powerline_colorscheme='solarized256'
""set completeopt=preview
set autoindent
set cindent
set history=1000
set showmatch				"高亮显示匹配的括号
set smartindent				" 为C程序提供自动缩进

""""""""记住上一次的打开的位置
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif


nnoremap <leader>q :q<CR>


"""""""" Omnicomplete
let OmniCpp_DefaultNamespaces = ["std"]
let OmniCpp_GlobalScopeSearch = 1 " 0 or 1
let OmniCpp_NamespaceSearch = 1 " 0 , 1 or 2
let OmniCpp_DisplayMode = 1
let OmniCpp_ShowScopeInAbbr = 0
let OmniCpp_ShowPrototypeInAbbr = 1
let OmniCpp_ShowAccess = 1
let OmniCpp_MayCompleteDot = 1
let OmniCpp_MayCompleteArrow = 1
let OmniCpp_MayCompleteScope = 1



"""""""" ctags自动生成插件 indexer, 依赖于DrankUtil, vimprj
"设置插件inderxer调用ctags的参数
let g:indexer_ctagsCommandLineOptions="--c++-kinds=+p+l+x+c+d+e+f+g+m+n+s+t+u+v --fields=+iaSl --extra=+q"


"""""""" tagbar设置
" 设置 tagbar 子窗口的位置出现在主编辑区的左边 
let tagbar_left=1 
" 设置显示／隐藏标签列表子窗口的快捷键。速记：tag list 
nmap <silent> <F7> :TagbarToggle<CR>
" 设置标签子窗口的宽度 
let tagbar_width=32 
" tagbar 子窗口中不显示冗余帮助信息 
let g:tagbar_compact=1
" 设置 ctags 对哪些代码元素生成标签
let g:tagbar_type_cpp = {
  \ 'kinds' : [
    \ 'd:macros:1',
    \ 'g:enums',
    \ 't:typedefs:0:0',
    \ 'e:enumerators:0:0',
    \ 'n:namespaces',
    \ 'c:classes',
    \ 's:structs',
    \ 'u:unions',
    \ 'f:functions',
    \ 'm:members:0:0',
    \ 'v:global:0:0',
    \ 'x:external:0:0',
    \ 'l:local:0:0'
   \ ],
   \ 'sro'		: '::',
   \ 'kind2scope' : {
     \ 'g' : 'enum',
     \ 'n' : 'namespace',
     \ 'c' : 'class',
     \ 's' : 'struct',
     \ 'u' : 'union'
   \ },
   \ 'scope2kind' : {
     \ 'enum'	  : 'g',
     \ 'namespace' : 'n',
     \ 'class'	 : 'c',
     \ 'struct'	: 's',
     \ 'union'	 : 'u'
   \ }
\ }



"""""""""" NERDTree
nmap <F8> :NERDTreeToggle<CR>
let NERDTreeWinSize=32
let NERDTreeWinPos="right"
"显示隐藏文件
let NERDTreeShowHidden=1
"不现实冗余信息
let NERDTreeMinimalUI=1
"删除文件的时候自动删除对应的buffer
let NERDTreeAutoDeleteBuffer=1


"""""""""" MiniBufExplorer
nmap <F3> :MBEbp<CR>
nmap <F4> :MBEbn<CR>
nnoremap <leader>d :MBEbd<CR>
""let g:miniBufExplMapWindowNavArrows = 1




"""""""""""""""" SuperTab 补全
let g:SuperTabRetainCompletionType=2   ""缺省为1，意为记住你上次的补全方式，
""直到使用其它的补全命令改变它；如果把它设成2，
""意味着记住上次的补全方式，直到按ESC退出插入模式为止；如果设为0，意味着不记录上次的补全方式。
let g:SuperTabDefaultCompletionType="<C-X><C-O>"  ""设置缺省的补全方式，缺省为CTRL-P


"""""""""""""" lookupfile settings
"""""""""""""" Explaination解释
"Here are the list of commands that the plugin defines: 
"        LookupFile      Lookup files from tag files. This is a like a fast GNU 
"                        find on name. It can lookup files from any Vim 
"                        compatible tag file (which includes those from ctags), 
"                        but at the moment it is advisable to generate 
"                        specialized tag files using :find command (see 
"                        |lookupfile-tags|). 
"        LUPath          Lookup files from 'path' using |globpath()|. The :find 
"                        command while being able to lookup files from 'path', it 
"                        doesn't provide any completion mechanism, and it is 
"                        clumsy when there are multiple files with the same name. 
"                        The :find command doesn't even accept a pattern. 
"        LUBufs          Lookup loaded files (buffers) using |bufname()|. This is 
"                        a great addition to whatever buffer-explorer you are 
"                        using. When there are too many buffers open, this 
"                        sometimes makes it easy to find the right buffer, by 
"                        typing part of its name. 
"        LUWalk          Lookup files using |glob()|. This works like the Emacs 
"                        ido.el, allowing you to walk up and down a path looking 
"                        for files. If you use the filename completion with :edit 
"                        command, then you will find this a lot more convenient 
"                        and faster to use. 
""        LUArgs          Lookup files from |:args| list. 

let g:LookupFile_MinPatLength = 2 "最少输入2个字符才开始查找   lookupfile默认是F5表示搜索文件
let g:LookupFile_PreserveLastPattern = 0 "不保存上次查找的字符串 
let g:LookupFile_PreservePatternHistory = 1 "保存查找历史 
let g:LookupFile_AlwaysAcceptFirst = 1 "回车打开第一个匹配项目 
let g:LookupFile_AllowNewFiles = 0 "不允许创建不存在的文件 

if filereadable("./filenametags") "设置tag文件的名字 
    let g:LookupFile_TagExpr = '"./filenametags"' 
endif 


"映射LookupFile为,lf
nmap <silent> <leader>lf :LUTags<CR>
"映射LUBufs为,lb 
nmap <silent> <leader>lb :LUBufs<CR>
"映射LUWalk为,ld
nmap <silent> <leader>ll :LUWalk<CR>

""""""""""""""" guifont++
let guifontpp_size_increment=1 "每次更改的字号     在vim中，M即Alt键
let guifontpp_smaller_font_map="<M-Down>"  "放大
let guifontpp_larger_font_map="<M-Up>"  "缩小
let guifontpp_original_font_map="<M-Home>" "默认大小




"""""""""""""" Grep
""""" vim自带的 vimgrep
"1) :vim[grep] start_stage * 在当前目录下（不包括子目录）搜索
"
"2) :vim[grep] start_stage ** 在当前所有目录（包括子目录）搜索
"
"3) :vim[grep] /start_stage/ * 在当前目录下搜索正则start_stage
"
"4) :vim[grep] /start_stage/ ** 在当前所有目录下搜索正则start_stage

"""""""""""""" Grep Help
":Grep 按照指定的规则在指定的文件中查找
":Rgrep 同上, 但是是递归的grep
":GrepBuffer 在所有打开的缓冲区中查找
":Bgrep 同上
":GrepArgs 在vim的argument filenames (:args)中查找
":Fgrep 运行fgrep
":Rfgrep 运行递归的fgrep
":Egrep 运行egrep
":Regrep 运行递归的egrep
":Agrep 运行agrep

nnoremap <F2> :Rgrep<CR>


""""""""""""""" Neocomplcache      "" TAB项目选择，<C-y>选择并退出，<C-e>直接退出
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplcache.
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_ignore_case = 1
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
let g:neocomplcache_enable_auto_select = 1

let g:neocomplcache_enable_fuzzy_completion = 1
let g:neocomplcache_enable_camel_case_completion = 1
let g:neocomplcache_enable_underbar_completion = 1
let g:neocomplcache_fuzzy_completion_start_length = 1
let g:neocomplcache_auto_completion_start_length = 1
let g:neocomplcache_manual_completion_start_length = 1
" Set minimum syntax keyword length.
let g:neocomplcache_min_keyword_length = 1
let g:neocomplcache_min_syntax_length = 1
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'
" complete with workds from any opened file
let g:neocomplcache_same_filetype_lists = {}
let g:neocomplcache_same_filetype_lists._ = '_'
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"		""使用Tab键进行待提示项目选择 
" Define keyword.
if !exists('g:neocomplcache_keyword_patterns')
    let g:neocomplcache_keyword_patterns = {}
endif
let g:neocomplcache_keyword_patterns['default'] = '\h\w*'     
" Plugin key-mappings.
inoremap <expr><C-g>     neocomplcache#undo_completion()
inoremap <expr><C-l>     neocomplcache#complete_common_string()
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"  
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"   ""<C-g> 取消补全  <C-l> 完成待补全项中共同的字符串
																 ""<C-h> 关闭待选项 <C-y> 关闭待选项
																 ""<C-e> 退出待选项 <BS> 关闭待选项
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup() 

""""""""""""""" cscope
nnoremap <leader>3 :cp<CR> 
nnoremap <leader>4 :cn<CR>
nnoremap <leader>1 :ccl<CR>
nnoremap <leader>2 :botright copen<CR>
set cscopequickfix=s-,c-,d-,i-,t-,e-  ""设定是否使用 quickfix 窗口来显示 cscope 结果
nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>          
nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>          
nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>      
nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>          
nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>          
"nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR$<CR>
nmap <C-\>i :cs find i <C-R>=expand("<cfile>")<CR><CR>
nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>

"""""这个在linux下面根目录起效果
if has("cscope")  
    "set csprg=/usr/bin/cscope  
	set csprg=cscope
    set csto=0  
    set cst  
    set csverb  
    set cspc=3  
    "add any database in current dir  
    if filereadable("cscope.out")  
        cs add cscope.out  
    "else search cscope.out elsewhere  
    else  
       let cscope_file=findfile("cscope.out", ".;")  
       let cscope_pre=matchstr(cscope_file, ".*/")  
       if !empty(cscope_file) && filereadable(cscope_file)  
           exe "cs add" cscope_file cscope_pre  
       endif        
     endif  
endif  




"""""""""""""""" Ctags
""""" ctags -R --file-scope=yes --langmap=c:+.h --languages=c,c++ --links=yes --c-kinds=+p --c++-kinds=+p --fields=+iaS --extra=+q
set tags=tags;  " ; 不可省略，表示若当前目录中不存在tags， 则在父目录中寻找。
set tags+=~/.vim/systags
""""""""""""" Create system tags command
"""""""""""""  ctags -I __THROW -I __attribute_pure__ -I __nonnull -I __attribute__ --file-scope=yes --langmap=c:+.h --languages=c,c++ --links=yes --c-kinds=+p --c++-kinds=+p --fields=+iaS --extra=+q -R -f ~/.vim/systags /usr/include /usr/local/include


"""更新ctags的函数
function! UpdateCtags()
    let curdir=getcwd()
    while !filereadable("./tags")
        cd ..
        if getcwd() == "/"
            break
        endif
    endwhile
    if filewritable("./tags")
        !ctags -R --file-scope=yes --langmap=c:+.h --languages=c,c++ --links=yes --c-kinds=+p --c++-kinds=+p --fields=+iaS --extra=+q
    endif
    execute ":cd " . curdir
endfunction
""nmap <F5> :call UpdateCtags()<CR>  ""用键盘映射的方式来更新ctags
nnoremap <leader><F5> :call UpdateCtags()<CR>  ""用键盘映射的方式来更新ctags 

"autocmd BufWritePost *.c,*.h,*.cpp,*.cc call UpdateCtags()  ""在vim保存文件时自动更新


"nmap <F2> :botright copen<CR>
"nmap <C-\>F2 :ccl<CR>
"":botright cwindow

